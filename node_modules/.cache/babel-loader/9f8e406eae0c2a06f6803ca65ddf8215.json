{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyecto\\\\react-wikishow\\\\src\\\\components\\\\hero-slide\\\\HeroSlide.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react'; //Devuelve un valor con estado y una función para actualizarlo.\n//La función pasada a useEffect se ejecutará después de que el renderizado es confirmado en la pantalla.\n//En esencia, useRef es como una “caja” que puedes mantener en una variable mutable en su propiedad .current.\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport Button from '../button/Boton';\nimport Modal, { ModalContent } from '../modal/Modal';\nimport tmdbApi, { category, movieType } from '../../api/tmdbApi';\nimport apiConfig from '../../api/apiConfig';\nimport './hero-slide.scss';\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HeroSlide = () => {\n  _s();\n\n  //Creamos los items de las peliculas es decir el conjunto y estableceremos que peliculas aparecera, con un estado vacio en ambos claro \n  const [movieItems, setMovieItems] = useState(['']);\n  /*Sincronizamos todas las peliculas , que pertenezcan a la primera pagina y haremos un try catch, donde esperamos la respuesta\n  de la API, con el tipo de Peliculas populares, que pertenezcan a la pagina 1, es decir params, ahora */\n\n  useEffect(() => {\n    const getMovies = async () => {\n      const params = {\n        page: 1\n      };\n\n      try {\n        const response = await tmdbApi.getMoviesList(movieType.popular, {\n          params\n        });\n        setMovieItems(response.results.slice(1, 8));\n        console.log(response);\n      } catch {\n        console.log('error');\n      }\n    };\n\n    getMovies();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero-slide\",\n    children: [/*#__PURE__*/_jsxDEV(Swiper, {\n      grabCursor: true,\n      slidesPerView: 1 // autoplay={{delay: 3000}}\n      ,\n      children: movieItems.map((item, i) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        children: _ref => {\n          let {\n            isActive\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(HeroSlideItem, {\n            item: item,\n            className: `${isActive ? 'active' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 33\n          }, this);\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), movieItems.map((item, i) => /*#__PURE__*/_jsxDEV(TrailerModal, {\n      item: item\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 45\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HeroSlide, \"Wq43lS0cYNDF9Tnxld1AJ/k9xzU=\");\n\n_c = HeroSlide;\n\nconst HeroSlideItem = props => {\n  _s2();\n\n  let hisrory = useHistory();\n  const item = props.item;\n  const background = apiConfig.originalImage(item.backdrop_path ? item.backdrop_path : item.poster_path);\n\n  const setModalActive = async () => {\n    const modal = document.querySelector(`#modal_${item.id}`);\n    const videos = await tmdbApi.getVideos(category.movie, item.id);\n\n    if (videos.results.length > 0) {\n      const videSrc = 'https://www.youtube.com/embed/' + videos.results[0].key;\n      modal.querySelector('.modal__content > iframe').setAttribute('src', videSrc);\n    } else {\n      modal.querySelector('.modal__content').innerHTML = 'No trailer';\n    }\n\n    modal.classList.toggle('active');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `hero-slide__item ${props.className}`,\n    style: {\n      backgroundImage: `url(${background})`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero-slide__item__content container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-slide__item__content__info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"title\",\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overview\",\n          children: item.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btns\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => hisrory.push('/movie/' + item.id),\n            children: \"Watch now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: setModalActive,\n            children: \"Watch trailer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-slide__item__content__poster\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: apiConfig.w500Image(item.poster_path),\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(HeroSlideItem, \"JdRvKuhMmRWQtVv8IgVX1b80ssM=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = HeroSlideItem;\n\nconst TrailerModal = props => {\n  _s3();\n\n  const item = props.item;\n  const iframeRef = useRef(null);\n\n  const onClose = () => iframeRef.current.setAttribute('src', '');\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    active: false,\n    id: `modal_${item.id}`,\n    children: /*#__PURE__*/_jsxDEV(ModalContent, {\n      onClose: onClose,\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        ref: iframeRef,\n        width: \"100%\",\n        height: \"500px\",\n        title: \"trailer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(TrailerModal, \"HIHwOEFe13FUYgDPZ3BBEH738M4=\");\n\n_c3 = TrailerModal;\nexport default HeroSlide;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"HeroSlide\");\n$RefreshReg$(_c2, \"HeroSlideItem\");\n$RefreshReg$(_c3, \"TrailerModal\");","map":{"version":3,"sources":["H:/Proyecto/react-wikishow/src/components/hero-slide/HeroSlide.jsx"],"names":["React","useState","useEffect","useRef","Swiper","SwiperSlide","Button","Modal","ModalContent","tmdbApi","category","movieType","apiConfig","useHistory","HeroSlide","movieItems","setMovieItems","getMovies","params","page","response","getMoviesList","popular","results","slice","console","log","map","item","i","isActive","HeroSlideItem","props","hisrory","background","originalImage","backdrop_path","poster_path","setModalActive","modal","document","querySelector","id","videos","getVideos","movie","length","videSrc","key","setAttribute","innerHTML","classList","toggle","className","backgroundImage","title","overview","push","w500Image","TrailerModal","iframeRef","onClose","current"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n//Devuelve un valor con estado y una función para actualizarlo.\n//La función pasada a useEffect se ejecutará después de que el renderizado es confirmado en la pantalla.\n//En esencia, useRef es como una “caja” que puedes mantener en una variable mutable en su propiedad .current.\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\nimport Button from '../button/Boton';\nimport Modal, { ModalContent } from '../modal/Modal';\n\nimport tmdbApi, { category, movieType } from '../../api/tmdbApi';\nimport apiConfig from '../../api/apiConfig';\n\nimport './hero-slide.scss';\nimport { useHistory } from 'react-router';\n\n\nconst HeroSlide = () => {\n\n    //Creamos los items de las peliculas es decir el conjunto y estableceremos que peliculas aparecera, con un estado vacio en ambos claro \n    const [movieItems, setMovieItems] = useState(['']);\n\n    /*Sincronizamos todas las peliculas , que pertenezcan a la primera pagina y haremos un try catch, donde esperamos la respuesta\n    de la API, con el tipo de Peliculas populares, que pertenezcan a la pagina 1, es decir params, ahora */\n    useEffect(() => {\n        const getMovies = async () => {\n            const params = {page: 1}\n            try {\n                const response = await tmdbApi.getMoviesList(movieType.popular, {params});\n                setMovieItems(response.results.slice(1, 8));\n                console.log(response);\n            } catch {\n                console.log('error');\n            }\n        }\n        getMovies();\n    }, []);\n\n    return (\n        <div className=\"hero-slide\">\n            <Swiper\n                grabCursor={true}\n                slidesPerView={1}\n                // autoplay={{delay: 3000}}\n            >\n                {\n                    movieItems.map((item, i) => (\n                        <SwiperSlide key={i}>\n                            {({ isActive }) => (\n                                <HeroSlideItem item={item} className={`${isActive ? 'active' : ''}`} />\n                            )}\n                        </SwiperSlide>\n                    ))\n                }\n            </Swiper>\n            {\n                movieItems.map((item, i) => <TrailerModal key={i} item={item}/>)\n            }\n        </div>\n    );\n}\n\nconst HeroSlideItem = props => {\n\n    let hisrory = useHistory();\n\n    const item = props.item;\n\n    const background = apiConfig.originalImage(item.backdrop_path ? item.backdrop_path : item.poster_path);\n\n    const setModalActive = async () => {\n        const modal = document.querySelector(`#modal_${item.id}`);\n\n        const videos = await tmdbApi.getVideos(category.movie, item.id);\n\n        if (videos.results.length > 0) {\n            const videSrc = 'https://www.youtube.com/embed/' + videos.results[0].key;\n            modal.querySelector('.modal__content > iframe').setAttribute('src', videSrc);\n        } else {\n            modal.querySelector('.modal__content').innerHTML = 'No trailer';\n        }\n\n        modal.classList.toggle('active');\n    }\n\n    return (\n        <div\n            className={`hero-slide__item ${props.className}`}\n            style={{backgroundImage: `url(${background})`}}\n        >\n            <div className=\"hero-slide__item__content container\">\n                <div className=\"hero-slide__item__content__info\">\n                    <h2 className=\"title\">{item.title}</h2>\n                    <div className=\"overview\">{item.overview}</div>\n                    <div className=\"btns\">\n                        <Button onClick={() => hisrory.push('/movie/' + item.id)}>\n                            Watch now\n                        </Button>\n                        <Button onClick={setModalActive}>\n                            Watch trailer\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"hero-slide__item__content__poster\">\n                    <img src={apiConfig.w500Image(item.poster_path)} alt=\"\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst TrailerModal = props => {\n    const item = props.item;\n\n    const iframeRef = useRef(null);\n\n    const onClose = () => iframeRef.current.setAttribute('src', '');\n\n    return (\n        <Modal active={false} id={`modal_${item.id}`}>\n            <ModalContent onClose={onClose}>\n                <iframe ref={iframeRef} width=\"100%\" height=\"500px\" title=\"trailer\"></iframe>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default HeroSlide;\n"]},"metadata":{},"sourceType":"module"}