{"ast":null,"code":"import axios from \"axios\";\nimport queryString from \"query-string\";\nimport AccessApi from \"./AccessApi\";\nconst AxiosUser = axios.create({\n  baseURL: AccessApi.baseUrl,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  paramsSerializer: params => {\n    queryString.stringify({ ...params,\n      api_key: AccessApi.apiKey\n    });\n  }\n});\nAxiosUser.interceptors.request.use(async config => config);\nAxiosUser.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n});\nexport default AxiosUser;","map":{"version":3,"sources":["H:/Proyecto/react-wikishow/src/api/AxiosUser.js"],"names":["axios","queryString","AccessApi","AxiosUser","create","baseURL","baseUrl","headers","paramsSerializer","params","stringify","api_key","apiKey","interceptors","request","use","config","response","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,SAAS,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEH,SAAS,CAACI,OADU;AAE7BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAY;AAC5BR,IAAAA,WAAW,CAACS,SAAZ,CAAsB,EAAE,GAAGD,MAAL;AAAaE,MAAAA,OAAO,EAAET,SAAS,CAACU;AAAhC,KAAtB;AACD;AAP4B,CAAb,CAAlB;AAUAT,SAAS,CAACU,YAAV,CAAuBC,OAAvB,CAA+BC,GAA/B,CAAmC,MAAOC,MAAP,IAAkBA,MAArD;AAEAb,SAAS,CAACU,YAAV,CAAuBI,QAAvB,CAAgCF,GAAhC,CAAqCE,QAAD,IAAc;AAChD,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC7B,WAAOD,QAAQ,CAACC,IAAhB;AACD;;AACD,SAAOD,QAAP;AACD,CALD;AAOA,eAAed,SAAf","sourcesContent":["import axios from \"axios\";\r\nimport queryString from \"query-string\";\r\n\r\nimport AccessApi from \"./AccessApi\";\r\n\r\nconst AxiosUser = axios.create({\r\n  baseURL: AccessApi.baseUrl,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  paramsSerializer: (params) => {\r\n    queryString.stringify({ ...params, api_key: AccessApi.apiKey })\r\n  }\r\n});\r\n\r\nAxiosUser.interceptors.request.use(async (config) => config);\r\n\r\nAxiosUser.interceptors.response.use((response) => {\r\n  if (response && response.data) {\r\n    return response.data;\r\n  }\r\n  return response;\r\n});\r\n\r\nexport default AxiosUser;\r\n"]},"metadata":{},"sourceType":"module"}