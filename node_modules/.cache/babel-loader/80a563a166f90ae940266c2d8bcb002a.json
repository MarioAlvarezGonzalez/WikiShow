{"ast":null,"code":"import queryString from 'query-string';\nimport axios from 'axios';\nimport AccessApi from './AccessApi';\nconst AxiosUser = axios.create({\n  baseURL: AccessApi.baseUrl,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  paramsSerializer: params => queryString.stringify({ ...params,\n    api_key: AccessApi.apiKey\n  })\n});\nAxiosUser.interceptors.request.use(async config => config);\nAxiosUser.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n});\nexport default AxiosUser;","map":{"version":3,"sources":["H:/Proyecto/react-wikishow/src/api/AxiosUser.js"],"names":["queryString","axios","AccessApi","AxiosUser","create","baseURL","baseUrl","headers","paramsSerializer","params","stringify","api_key","apiKey","interceptors","request","use","config","response","data"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AAAwC,OAAOC,KAAP,MAAkB,OAAlB;AAGxC,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEH,SAAS,CAACI,OADQ;AAE3BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFkB;AAK3BC,EAAAA,gBAAgB,EAAEC,MAAM,IACpBT,WAAW,CAACU,SAAZ,CAAsB,EAAC,GAAGD,MAAJ;AAAYE,IAAAA,OAAO,EAAET,SAAS,CAACU;AAA/B,GAAtB;AANuB,CAAb,CAAlB;AAUAT,SAAS,CAACU,YAAV,CAAuBC,OAAvB,CAA+BC,GAA/B,CAAmC,MAAOC,MAAP,IAAkBA,MAArD;AAEAb,SAAS,CAACU,YAAV,CAAuBI,QAAvB,CAAgCF,GAAhC,CAAqCE,QAAD,IAAc;AAC9C,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAQ,CAACC,IAAhB;AACH;;AACD,SAAOD,QAAP;AACC,CALL;AAQA,eAAed,SAAf","sourcesContent":["import queryString from 'query-string'; import axios from 'axios';\r\n\r\n\r\nimport AccessApi from './AccessApi';\r\n\r\nconst AxiosUser = axios.create({\r\n    baseURL: AccessApi.baseUrl,\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    },\r\n    paramsSerializer: params => (\r\n        queryString.stringify({...params, api_key: AccessApi.apiKey})\r\n        )\r\n});\r\n\r\nAxiosUser.interceptors.request.use(async (config) => config);\r\n\r\nAxiosUser.interceptors.response.use((response) => {\r\n    if (response && response.data) {\r\n        return response.data;\r\n    }\r\n    return response;\r\n    }\r\n);\r\n\r\nexport default AxiosUser;"]},"metadata":{},"sourceType":"module"}