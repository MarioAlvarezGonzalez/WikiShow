{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyecto\\\\react-wikishow\\\\src\\\\components\\\\hero-slide\\\\HeroSlide.jsx\",\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react'; //Devuelve un valor con estado y una función para actualizarlo.\n//La función pasada a useEffect se ejecutará después de que el renderizado es confirmado en la pantalla.\n//En esencia, useRef es como una “caja” que puedes mantener en una variable mutable en su propiedad .current.\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport Button from '../button/Button';\nimport Modal, { ModalContent } from '../modal/Modal';\nimport tmdbApi, { category, movie_category } from '../../api/ConfigApi';\nimport ImagesApi from '../../api/ImagesApi';\nimport './hero-slide.scss';\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HeroSlide = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //Creamos los items de las peliculas es decir el conjunto y estableceremos que peliculas aparecera, con un estado vacio en ambos claro \n  const [movies, setMovieItems] = useState(['']);\n  /*Sincronizamos todas las peliculas , que pertenezcan a la primera pagina y haremos un try catch, donde esperamos la respuesta\n  de la API, con el tipo de Peliculas populares, que pertenezcan a la pagina 1, es decir params, ahora esa respuesta la volcaremos en\n  setMovieItems, y esa respuesta mediante el slice, la diviremos en 8 partes, es decir la cantidad de donde empieza y donde acaba*/\n\n  useEffect(() => {\n    const getMovies = async () => {\n      const params = {\n        page: 1\n      };\n\n      try {\n        const response = await tmdbApi.getMoviesList(movie_category.popular, {\n          params\n        });\n        setMovieItems(response.results.slice(0, 7));\n        console.log(response); //Verifico que obtiene respuesta, en caso negativo salta al catch para ver el error\n      } catch {\n        console.log('error');\n      }\n    };\n\n    getMovies();\n  }, []);\n  /*Crearemos el Trailer, cogiendo las propiedades de peliculas, el evento onClose, es muy imporante para cuando cierras\n  el trailer el video no se siga reproduciendo en un segundo plano*/\n\n  const Trailer = props => {\n    _s();\n\n    const film = props.film;\n    const iframeRef = useRef(null);\n\n    const onClose = () => iframeRef.current.setAttribute('src', '');\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      id: `modal_${film.id}`,\n      children: /*#__PURE__*/_jsxDEV(ModalContent, {\n        onClose: onClose,\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          ref: iframeRef,\n          width: \"100%\",\n          height: \"500px\",\n          title: \"trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  };\n  /*Vale ahora devolvemos un return del hero slide, llamamos a la clase como en html y ahora con la propiedades del SWIPPER\n  hacemos que coga el curso,importante la linea 67 hace que el propio cursos manteniendolo podramos moverlo, esto esta\n  pensado para movil pero para PC sirve igual, decimos que queremos ver unicamente un slide es decir de 1en1 si no se puede\n  quedar en la mitad del slice de las peliculas.\n  Ahora con las peliculas, haremos un mapeo para ir uno por uno,mostrando cada pelicula en cada swiper,\n  sin estas propiedades aparecera un swiper sin contenido alguno, por lo tanto es obligatorio mapear el slide*/\n\n\n  _s(Trailer, \"HIHwOEFe13FUYgDPZ3BBEH738M4=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero-slide\",\n    children: [/*#__PURE__*/_jsxDEV(Swiper, {\n      grabCursor: true,\n      slidesPerView: 1,\n      children: movies.map((film, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        children: _ref => {\n          let {\n            isActive\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(HeroSlideItem, {\n            film: film,\n            className: `${isActive ? 'active' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this);\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), movies.map((film, index) => /*#__PURE__*/_jsxDEV(Trailer, {\n      film: film\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 45\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n/*La linea 65 sirve para poder llegar a ver el trailer asociado a esa pelicula, por eso del Trailer modal,\n tiene que mapear cada pelicula con su trailer y lo hacemos mediante la key */\n\n\n_s2(HeroSlide, \"RjQZDmoHCMqB2+vJOylnkk9aeFQ=\");\n\n_c = HeroSlide;\n\nconst HeroSlideItem = props => {\n  _s3();\n\n  //El enlace useHistory nos permite acceder al objeto de historial de React Router.\n  let history = useHistory(); //Volcamos las propiedades de las peliculas en film, y configuramos el background con las propiedades de la API, como el poster\n  //Si no encuentra el backdrop, cogera el poster es decir siempre tendra un fondo \n\n  const film = props.film;\n  const background = ImagesApi.originalImage(film.backdrop_path ? film.backdrop_path : film.poster_path); //El componente modal proporciona una base sólida para crear cuadros de diálogo, popovers, lightboxes o cualquier otra cosa.\n\n  const setModalSelected = async () => {\n    const modal = document.querySelector(`#modal_${film.id}`);\n    const trailer = await tmdbApi.getVideos(category.movie, film.id); //Decimos que si tiene algun trailer,cojeremos la url del video, y cogeremos el primer resultado,\n    //Normalmente el resultado 0, suele ser el trailer pero no es 100% seguro y eso lo volcamos al iframe\n\n    if (trailer.results.length > 0) {\n      const video = 'https://www.youtube.com/embed/' + trailer.results[1].key;\n      modal.querySelector('.modal__content > iframe').setAttribute('src', video);\n    }\n\n    modal.classList.toggle('active'); //Con esto aparecera el iframe con el trailer\n  };\n  /*Aqui devolveremos el html con todos los componentes anteriormente creados, llamaremos a film que tiene todas las propiedades\n  titulo overview, poster e incluso un fondo y los btn de Boton.jsx y la configuracion de la API es decir todo se junta aqui*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `hero-slide__item ${props.className}`,\n    style: {\n      backgroundImage: `url(${background})`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero-slide__item__content container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-slide__item__content__info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"title\",\n          children: film.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overview\",\n          children: film.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btns\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => history.push('/movie/' + film.id),\n            children: \"Watch now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: setModalSelected,\n            children: \"Watch video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-slide__item__content__poster\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: ImagesApi.originalImage(film.poster_path),\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(HeroSlideItem, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = HeroSlideItem;\nexport default HeroSlide;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HeroSlide\");\n$RefreshReg$(_c2, \"HeroSlideItem\");","map":{"version":3,"sources":["H:/Proyecto/react-wikishow/src/components/hero-slide/HeroSlide.jsx"],"names":["React","useState","useEffect","useRef","Swiper","SwiperSlide","Button","Modal","ModalContent","tmdbApi","category","movie_category","ImagesApi","useHistory","HeroSlide","movies","setMovieItems","getMovies","params","page","response","getMoviesList","popular","results","slice","console","log","Trailer","props","film","iframeRef","onClose","current","setAttribute","id","map","index","isActive","HeroSlideItem","history","background","originalImage","backdrop_path","poster_path","setModalSelected","modal","document","querySelector","trailer","getVideos","movie","length","video","key","classList","toggle","className","backgroundImage","title","overview","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n//Devuelve un valor con estado y una función para actualizarlo.\n//La función pasada a useEffect se ejecutará después de que el renderizado es confirmado en la pantalla.\n//En esencia, useRef es como una “caja” que puedes mantener en una variable mutable en su propiedad .current.\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\nimport Button from '../button/Button';\nimport Modal, { ModalContent } from '../modal/Modal';\n\nimport tmdbApi, { category, movie_category } from '../../api/ConfigApi';\nimport ImagesApi from '../../api/ImagesApi';\n\nimport './hero-slide.scss';\nimport { useHistory } from 'react-router';\n\n\nconst HeroSlide = () => {\n\n    //Creamos los items de las peliculas es decir el conjunto y estableceremos que peliculas aparecera, con un estado vacio en ambos claro \n    const [movies, setMovieItems] = useState(['']);\n\n    /*Sincronizamos todas las peliculas , que pertenezcan a la primera pagina y haremos un try catch, donde esperamos la respuesta\n    de la API, con el tipo de Peliculas populares, que pertenezcan a la pagina 1, es decir params, ahora esa respuesta la volcaremos en\n    setMovieItems, y esa respuesta mediante el slice, la diviremos en 8 partes, es decir la cantidad de donde empieza y donde acaba*/\n    useEffect(() => {\n        const getMovies = async () => {\n            const params = {page: 1}\n            try {\n                const response = await tmdbApi.getMoviesList(movie_category.popular, {params});\n                setMovieItems(response.results.slice(0, 7));\n                console.log(response); //Verifico que obtiene respuesta, en caso negativo salta al catch para ver el error\n            } catch {\n                console.log('error');\n            }\n        }\n        getMovies();\n    }, []);\n\n\n    /*Crearemos el Trailer, cogiendo las propiedades de peliculas, el evento onClose, es muy imporante para cuando cierras\n    el trailer el video no se siga reproduciendo en un segundo plano*/\n    const Trailer = props => {\n        const film = props.film;\n    \n        const iframeRef = useRef(null);\n    \n        const onClose = () => iframeRef.current.setAttribute('src', '');\n    \n        return (\n            <Modal id={`modal_${film.id}`}>\n                <ModalContent onClose={onClose}>\n                    <iframe ref={iframeRef} width=\"100%\" height=\"500px\" title=\"trailer\"></iframe>\n                </ModalContent>\n            </Modal>\n        )\n    }\n\n        /*Vale ahora devolvemos un return del hero slide, llamamos a la clase como en html y ahora con la propiedades del SWIPPER\n    hacemos que coga el curso,importante la linea 67 hace que el propio cursos manteniendolo podramos moverlo, esto esta\n    pensado para movil pero para PC sirve igual, decimos que queremos ver unicamente un slide es decir de 1en1 si no se puede\n    quedar en la mitad del slice de las peliculas.\n    Ahora con las peliculas, haremos un mapeo para ir uno por uno,mostrando cada pelicula en cada swiper,\n    sin estas propiedades aparecera un swiper sin contenido alguno, por lo tanto es obligatorio mapear el slide*/\n    return (\n        <div className=\"hero-slide\">\n            <Swiper\n                grabCursor={true}\n                slidesPerView={1}\n            >\n    \n                {\n                    movies.map((film, index) => (\n                        <SwiperSlide key={index}>\n                            {({ isActive }) => (\n                                <HeroSlideItem film={film} className={`${isActive ? 'active' : ''}`} />\n                            )}\n                        </SwiperSlide>\n                    ))\n                }\n            </Swiper>\n            {\n                movies.map((film, index) => <Trailer key={index} film={film}/>)\n            }\n        </div>\n    );\n}\n/*La linea 65 sirve para poder llegar a ver el trailer asociado a esa pelicula, por eso del Trailer modal,\n tiene que mapear cada pelicula con su trailer y lo hacemos mediante la key */\n \nconst HeroSlideItem = props => {\n\n    //El enlace useHistory nos permite acceder al objeto de historial de React Router.\n    let history = useHistory();\n\n    //Volcamos las propiedades de las peliculas en film, y configuramos el background con las propiedades de la API, como el poster\n    //Si no encuentra el backdrop, cogera el poster es decir siempre tendra un fondo \n    const film = props.film;\n\n    const background = ImagesApi.originalImage(film.backdrop_path ? film.backdrop_path : film.poster_path);\n\n    //El componente modal proporciona una base sólida para crear cuadros de diálogo, popovers, lightboxes o cualquier otra cosa.\n    const setModalSelected = async () => {\n        const modal = document.querySelector(`#modal_${film.id}`);\n\n        const trailer = await tmdbApi.getVideos(category.movie, film.id);\n\n        //Decimos que si tiene algun trailer,cojeremos la url del video, y cogeremos el primer resultado,\n        //Normalmente el resultado 0, suele ser el trailer pero no es 100% seguro y eso lo volcamos al iframe\n        if (trailer.results.length > 0) {\n            const video = 'https://www.youtube.com/embed/' + trailer.results[1].key;\n            modal.querySelector('.modal__content > iframe').setAttribute('src', video);\n        }\n\n        modal.classList.toggle('active'); //Con esto aparecera el iframe con el trailer\n    }\n\n    /*Aqui devolveremos el html con todos los componentes anteriormente creados, llamaremos a film que tiene todas las propiedades\n    titulo overview, poster e incluso un fondo y los btn de Boton.jsx y la configuracion de la API es decir todo se junta aqui*/\n\n    return (\n        <div\n            className={`hero-slide__item ${props.className}`}\n            style={{backgroundImage: `url(${background})`}}\n        >\n            <div className=\"hero-slide__item__content container\">\n                <div className=\"hero-slide__item__content__info\">\n                    <h2 className=\"title\">{film.title}</h2>\n                    <div className=\"overview\">{film.overview}</div>\n                    <div className=\"btns\">\n                        <Button onClick={() => history.push('/movie/' + film.id)}>\n                            Watch now\n                        </Button>\n                        <Button onClick={setModalSelected}>\n                            Watch video\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"hero-slide__item__content__poster\">\n                    <img src={ImagesApi.originalImage(film.poster_path)} alt=\"\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default HeroSlide;\n"]},"metadata":{},"sourceType":"module"}