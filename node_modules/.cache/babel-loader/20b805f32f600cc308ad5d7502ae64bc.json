{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyecto\\\\react-movie-app\\\\src\\\\components\\\\person-list\\\\PersonList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './person-list.scss';\nimport { SwiperSlide, Swiper } from 'swiper/react';\nimport tmdbApi, { category } from '../../api/tmdbApi';\nimport MovieCard from '../movie-card/MovieCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PersonList = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (props.type !== 'movie_credits') {\n        switch (props.category) {\n          case category.movie:\n        }\n      } else {\n        response = await tmdbApi.movie_credits(props.category, props.id);\n      }\n\n      setItems(response.results);\n    };\n\n    getList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: /*#__PURE__*/_jsxDEV(Swiper, {\n      grabCursor: true,\n      spaceBetween: 10,\n      slidesPerView: 'auto',\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        children: /*#__PURE__*/_jsxDEV(MovieCard, {\n          item: item,\n          category: props.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PersonList, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n\n_c = PersonList;\nPersonList.propTypes = {\n  category: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default PersonList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PersonList\");","map":{"version":3,"sources":["H:/Proyecto/react-movie-app/src/components/person-list/PersonList.jsx"],"names":["React","useState","useEffect","PropTypes","SwiperSlide","Swiper","tmdbApi","category","MovieCard","PersonList","props","items","setItems","getList","response","params","type","movie","movie_credits","id","results","map","item","i","propTypes","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,oBAAP;AAEA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,cAApC;AAGA,OAAOC,OAAP,IAAkBC,QAAlB,QAAkC,mBAAlC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAAA;;AAExB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,OAAO,GAAG,YAAY;AACxB,UAAIC,QAAQ,GAAG,IAAf;AACA,YAAMC,MAAM,GAAG,EAAf;;AAEA,UAAIL,KAAK,CAACM,IAAN,KAAe,eAAnB,EAAoC;AAChC,gBAAQN,KAAK,CAACH,QAAd;AACI,eAAKA,QAAQ,CAACU,KAAd;AADJ;AAIH,OALD,MAKO;AACHH,QAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACY,aAAR,CAAsBR,KAAK,CAACH,QAA5B,EAAsCG,KAAK,CAACS,EAA5C,CAAjB;AACH;;AACDP,MAAAA,QAAQ,CAACE,QAAQ,CAACM,OAAV,CAAR;AACH,KAbD;;AAcAP,IAAAA,OAAO;AACV,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI,QAAC,MAAD;AACI,MAAA,UAAU,EAAE,IADhB;AAEI,MAAA,YAAY,EAAE,EAFlB;AAGI,MAAA,aAAa,EAAE,MAHnB;AAAA,gBAMQF,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBACN,QAAC,WAAD;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,IAAI,EAAED,IAAjB;AAAuB,UAAA,QAAQ,EAAEZ,KAAK,CAACH;AAAvC;AAAA;AAAA;AAAA;AAAA;AADJ,SAAkBgB,CAAlB;AAAA;AAAA;AAAA;AAAA,cADJ;AANR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAvCD;;GAAMd,U;;KAAAA,U;AAyCNA,UAAU,CAACe,SAAX,GAAuB;AACnBjB,EAAAA,QAAQ,EAAEJ,SAAS,CAACsB,MAAV,CAAiBC,UADR;AAEnBV,EAAAA,IAAI,EAAEb,SAAS,CAACsB,MAAV,CAAiBC;AAFJ,CAAvB;AAKA,eAAejB,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './person-list.scss';\r\n\r\nimport { SwiperSlide, Swiper } from 'swiper/react';\r\n\r\n\r\nimport tmdbApi, { category } from '../../api/tmdbApi';\r\n\r\nimport MovieCard from '../movie-card/MovieCard';\r\n\r\nconst PersonList = props => {\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let response = null;\r\n            const params = {};\r\n\r\n            if (props.type !== 'movie_credits') {\r\n                switch (props.category) {\r\n                    case category.movie:\r\n                       \r\n                }\r\n            } else {\r\n                response = await tmdbApi.movie_credits(props.category, props.id);\r\n            }\r\n            setItems(response.results);\r\n        }\r\n        getList();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"movie-list\">\r\n            <Swiper\r\n                grabCursor={true}\r\n                spaceBetween={10}\r\n                slidesPerView={'auto'}\r\n            >\r\n                {\r\n                    items.map((item, i) => (\r\n                        <SwiperSlide key={i}>\r\n                            <MovieCard item={item} category={props.category} />\r\n                        </SwiperSlide>\r\n                    ))\r\n                }\r\n            </Swiper>\r\n        </div>\r\n    );\r\n}\r\n\r\nPersonList.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired\r\n}\r\n\r\nexport default PersonList;\r\n"]},"metadata":{},"sourceType":"module"}