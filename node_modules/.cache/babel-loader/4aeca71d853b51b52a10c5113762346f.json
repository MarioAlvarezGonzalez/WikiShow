{"ast":null,"code":"var _jsxFileName = \"H:\\\\Proyecto\\\\react-wikishow\\\\src\\\\components\\\\movie-grid\\\\MovieGrid.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport Button from '../button/Button';\nimport Input from '../input/Input';\nimport ConfigApi, { category, movie, tv_category, person_category } from '../../api/ConfigApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = \"\";\n\n      if (keyword === undefined) {\n        const params = {};\n\n        switch (props.category) {\n          case category.movie:\n            response = await ConfigApi.getMoviesList(movie.upcoming, {\n              params\n            });\n            break;\n\n          case category.tv:\n            response = await ConfigApi.getTvList(tv_category.popular, {\n              params\n            });\n            break;\n\n          default:\n          case category.person:\n            response = await ConfigApi.getPersonList(person_category.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await ConfigApi.search(props.category, {\n          params\n        });\n      }\n\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n\n    getList();\n  }, [props.category, keyword]);\n\n  const loadMore = async () => {\n    let response = \"\";\n\n    if (keyword === undefined) {\n      const params = {\n        page: page + 1\n      };\n\n      switch (props.category) {\n        case category.movie:\n          response = await ConfigApi.getMoviesList(movie.upcoming, {\n            params\n          });\n          break;\n\n        case category.tv:\n          response = await ConfigApi.getTvList(tv_category.popular, {\n            params\n          });\n          break;\n\n        default:\n        case category.person:\n          response = await ConfigApi.getPersonList(person_category.popular, {\n            params\n          });\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await ConfigApi.search(props.category, {\n        params\n      });\n    }\n\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section mb-2\",\n      children: /*#__PURE__*/_jsxDEV(MovieSearch, {\n        category: props.category,\n        keyword: keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: props.category,\n        item: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 44\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid__loadmore\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        className: \"small\",\n        onClick: loadMore,\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this) : \"\"]\n  }, void 0, true);\n};\n\n_s(MovieGrid, \"gVKJykNS0ZZmAcVWR7yk7gRUMnQ=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieGrid;\n\nconst MovieSearch = props => {\n  _s2();\n\n  const history = useHistory();\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\n  const goToSearch = useCallback(() => {\n    if (keyword.trim().length > 0) {\n      history.push(`/${category[props.category]}/search/${keyword}`);\n    }\n  }, [keyword, props.category, history]);\n  useEffect(() => {\n    const enterEvent = e => {\n      e.preventDefault();\n\n      if (e.keyCode === 13) {\n        goToSearch();\n      }\n    };\n\n    document.addEventListener('keyup', enterEvent);\n    return () => {\n      document.removeEventListener('keyup', enterEvent);\n    };\n  }, [keyword, goToSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Type here to search\",\n      value: keyword,\n      onChange: e => setKeyword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"small\",\n      onClick: goToSearch,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bx bx-search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(MovieSearch, \"I2NExLrNnOoAB+SPN4V+sg7kpxQ=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = MovieSearch;\nexport default MovieGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MovieGrid\");\n$RefreshReg$(_c2, \"MovieSearch\");","map":{"version":3,"sources":["H:/Proyecto/react-wikishow/src/components/movie-grid/MovieGrid.jsx"],"names":["React","useState","useEffect","useCallback","useHistory","useParams","MovieCard","Button","Input","ConfigApi","category","movie","tv_category","person_category","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","getMoviesList","upcoming","tv","getTvList","popular","person","getPersonList","query","search","results","total_pages","loadMore","map","item","i","MovieSearch","history","setKeyword","goToSearch","trim","length","push","enterEvent","e","preventDefault","keyCode","document","addEventListener","removeEventListener","target","value"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,cAAtC;AAEA,OAAO,mBAAP;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAOC,SAAP,IAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,WAArC,EAAkDC,eAAlD,QAAyE,qBAAzE;;;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA;;AAEvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,CAAD,CAA1C;AAEA,QAAM;AAAEqB,IAAAA;AAAF,MAAcjB,SAAS,EAA7B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,OAAO,GAAG,YAAY;AACxB,UAAIC,QAAQ,GAAG,EAAf;;AACA,UAAIF,OAAO,KAAKG,SAAhB,EAA2B;AACvB,cAAMC,MAAM,GAAG,EAAf;;AACA,gBAAQX,KAAK,CAACL,QAAd;AACI,eAAKA,QAAQ,CAACC,KAAd;AACIa,YAAAA,QAAQ,GAAG,MAAMf,SAAS,CAACkB,aAAV,CAAwBhB,KAAK,CAACiB,QAA9B,EAAwC;AAAEF,cAAAA;AAAF,aAAxC,CAAjB;AACA;;AACJ,eAAKhB,QAAQ,CAACmB,EAAd;AACIL,YAAAA,QAAQ,GAAG,MAAMf,SAAS,CAACqB,SAAV,CAAoBlB,WAAW,CAACmB,OAAhC,EAAyC;AAAEL,cAAAA;AAAF,aAAzC,CAAjB;AACA;;AACJ;AACA,eAAKhB,QAAQ,CAACsB,MAAd;AACIR,YAAAA,QAAQ,GAAG,MAAMf,SAAS,CAACwB,aAAV,CAAwBpB,eAAe,CAACkB,OAAxC,EAAiD;AAAEL,cAAAA;AAAF,aAAjD,CAAjB;AATR;AAaH,OAfD,MAeO;AACH,cAAMA,MAAM,GAAG;AACXQ,UAAAA,KAAK,EAAEZ;AADI,SAAf;AAGAE,QAAAA,QAAQ,GAAG,MAAMf,SAAS,CAAC0B,MAAV,CAAiBpB,KAAK,CAACL,QAAvB,EAAiC;AAAEgB,UAAAA;AAAF,SAAjC,CAAjB;AACH;;AACDT,MAAAA,QAAQ,CAACO,QAAQ,CAACY,OAAV,CAAR;AACAf,MAAAA,YAAY,CAACG,QAAQ,CAACa,WAAV,CAAZ;AACH,KAzBD;;AA0BAd,IAAAA,OAAO;AACV,GA5BQ,EA4BN,CAACR,KAAK,CAACL,QAAP,EAAiBY,OAAjB,CA5BM,CAAT;;AA8BA,QAAMgB,QAAQ,GAAG,YAAY;AACzB,QAAId,QAAQ,GAAG,EAAf;;AACA,QAAIF,OAAO,KAAKG,SAAhB,EAA2B;AACvB,YAAMC,MAAM,GAAG;AACXR,QAAAA,IAAI,EAAEA,IAAI,GAAG;AADF,OAAf;;AAGA,cAAQH,KAAK,CAACL,QAAd;AACI,aAAKA,QAAQ,CAACC,KAAd;AACIa,UAAAA,QAAQ,GAAG,MAAMf,SAAS,CAACkB,aAAV,CAAwBhB,KAAK,CAACiB,QAA9B,EAAwC;AAAEF,YAAAA;AAAF,WAAxC,CAAjB;AACA;;AACJ,aAAKhB,QAAQ,CAACmB,EAAd;AACIL,UAAAA,QAAQ,GAAG,MAAMf,SAAS,CAACqB,SAAV,CAAoBlB,WAAW,CAACmB,OAAhC,EAAyC;AAAEL,YAAAA;AAAF,WAAzC,CAAjB;AACA;;AACJ;AACA,aAAKhB,QAAQ,CAACsB,MAAd;AACIR,UAAAA,QAAQ,GAAG,MAAMf,SAAS,CAACwB,aAAV,CAAwBpB,eAAe,CAACkB,OAAxC,EAAiD;AAAEL,YAAAA;AAAF,WAAjD,CAAjB;AATR;AAYH,KAhBD,MAgBO;AACH,YAAMA,MAAM,GAAG;AACXR,QAAAA,IAAI,EAAEA,IAAI,GAAG,CADF;AAEXgB,QAAAA,KAAK,EAAEZ;AAFI,OAAf;AAIAE,MAAAA,QAAQ,GAAG,MAAMf,SAAS,CAAC0B,MAAV,CAAiBpB,KAAK,CAACL,QAAvB,EAAiC;AAAEgB,QAAAA;AAAF,OAAjC,CAAjB;AACH;;AACDT,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGQ,QAAQ,CAACY,OAAvB,CAAD,CAAR;AACAjB,IAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,GA3BD;;AA6BA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACI,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEH,KAAK,CAACL,QAA7B;AAAuC,QAAA,OAAO,EAAEY;AAAhD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBAEQN,KAAK,CAACuB,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBAAa,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAE1B,KAAK,CAACL,QAA3B;AAAqC,QAAA,IAAI,EAAE8B;AAA3C,SAAsDC,CAAtD;AAAA;AAAA;AAAA;AAAA,cAAvB;AAFR;AAAA;AAAA;AAAA;AAAA,YAJJ,EAUQvB,IAAI,GAAGE,SAAP,gBACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,OAAlB;AAA0B,QAAA,OAAO,EAAEkB,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,GAII,EAdZ;AAAA,kBADJ;AAmBH,CAvFD;;GAAMxB,S;UAOkBT,S;;;KAPlBS,S;;AAyFN,MAAM4B,WAAW,GAAG3B,KAAK,IAAI;AAAA;;AAEzB,QAAM4B,OAAO,GAAGvC,UAAU,EAA1B;AAEA,QAAM,CAACkB,OAAD,EAAUsB,UAAV,IAAwB3C,QAAQ,CAACc,KAAK,CAACO,OAAN,GAAgBP,KAAK,CAACO,OAAtB,GAAgC,EAAjC,CAAtC;AAEA,QAAMuB,UAAU,GAAG1C,WAAW,CAC1B,MAAM;AACF,QAAImB,OAAO,CAACwB,IAAR,GAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC3BJ,MAAAA,OAAO,CAACK,IAAR,CAAc,IAAGtC,QAAQ,CAACK,KAAK,CAACL,QAAP,CAAiB,WAAUY,OAAQ,EAA5D;AACH;AACJ,GALyB,EAM1B,CAACA,OAAD,EAAUP,KAAK,CAACL,QAAhB,EAA0BiC,OAA1B,CAN0B,CAA9B;AASAzC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM+C,UAAU,GAAIC,CAAD,IAAO;AACtBA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAID,CAAC,CAACE,OAAF,KAAc,EAAlB,EAAsB;AAClBP,QAAAA,UAAU;AACb;AACJ,KALD;;AAMAQ,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCL,UAAnC;AACA,WAAO,MAAM;AACTI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCN,UAAtC;AACH,KAFD;AAGH,GAXQ,EAWN,CAAC3B,OAAD,EAAUuB,UAAV,CAXM,CAAT;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI,QAAC,KAAD;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,WAAW,EAAC,qBAFhB;AAGI,MAAA,KAAK,EAAEvB,OAHX;AAII,MAAA,QAAQ,EAAG4B,CAAD,IAAON,UAAU,CAACM,CAAC,CAACM,MAAF,CAASC,KAAV;AAJ/B;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAA0B,MAAA,OAAO,EAAEZ,UAAnC;AAAA,6BACK;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAzCD;;IAAMH,W;UAEctC,U;;;MAFdsC,W;AA2CN,eAAe5B,SAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router';\n\nimport './movie-grid.scss';\n\nimport MovieCard from '../movie-card/MovieCard';\nimport Button from '../button/Button';\nimport Input from '../input/Input'\n\nimport ConfigApi, { category, movie, tv_category, person_category } from '../../api/ConfigApi';\n\nconst MovieGrid = props => {\n\n    const [items, setItems] = useState([]);\n\n    const [page, setPage] = useState(1);\n    const [totalPage, setTotalPage] = useState(0);\n\n    const { keyword } = useParams();\n\n    useEffect(() => {\n        const getList = async () => {\n            let response = \"\";\n            if (keyword === undefined) {\n                const params = {};\n                switch (props.category) {\n                    case category.movie:\n                        response = await ConfigApi.getMoviesList(movie.upcoming, { params });\n                        break;\n                    case category.tv:\n                        response = await ConfigApi.getTvList(tv_category.popular, { params });\n                        break;\n                    default:\n                    case category.person:\n                        response = await ConfigApi.getPersonList(person_category.popular, { params });\n\n\n                }\n            } else {\n                const params = {\n                    query: keyword\n                }\n                response = await ConfigApi.search(props.category, { params });\n            }\n            setItems(response.results);\n            setTotalPage(response.total_pages);\n        }\n        getList();\n    }, [props.category, keyword]);\n\n    const loadMore = async () => {\n        let response = \"\";\n        if (keyword === undefined) {\n            const params = {\n                page: page + 1\n            };\n            switch (props.category) {\n                case category.movie:\n                    response = await ConfigApi.getMoviesList(movie.upcoming, { params });\n                    break;\n                case category.tv:\n                    response = await ConfigApi.getTvList(tv_category.popular, { params });\n                    break;\n                default:\n                case category.person:\n                    response = await ConfigApi.getPersonList(person_category.popular, { params });\n\n            }\n        } else {\n            const params = {\n                page: page + 1,\n                query: keyword\n            }\n            response = await ConfigApi.search(props.category, { params });\n        }\n        setItems([...items, ...response.results]);\n        setPage(page + 1);\n    }\n\n    return (\n        <>\n            <div className=\"section mb-2\">\n                <MovieSearch category={props.category} keyword={keyword} />\n            </div>\n            <div className=\"movie-grid\">\n                {\n                    items.map((item, i) => <MovieCard category={props.category} item={item} key={i} />)\n                }\n            </div>\n            {\n                page < totalPage ? (\n                    <div className=\"movie-grid__loadmore\">\n                        <Button className=\"small\" onClick={loadMore}>Load more</Button>\n                    </div>\n                ) : \"\"\n            }\n        </>\n    );\n}\n\nconst MovieSearch = props => {\n\n    const history = useHistory();\n\n    const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\n\n    const goToSearch = useCallback(\n        () => {\n            if (keyword.trim().length > 0) {\n                history.push(`/${category[props.category]}/search/${keyword}`);\n            }\n        },\n        [keyword, props.category, history]\n    );\n\n    useEffect(() => {\n        const enterEvent = (e) => {\n            e.preventDefault();\n            if (e.keyCode === 13) {\n                goToSearch();\n            }\n        }\n        document.addEventListener('keyup', enterEvent);\n        return () => {\n            document.removeEventListener('keyup', enterEvent);\n        };\n    }, [keyword, goToSearch]);\n\n    return (\n        <div className=\"movie-search\">\n            <Input\n                type=\"text\"\n                placeholder=\"Type here to search\"\n                value={keyword}\n                onChange={(e) => setKeyword(e.target.value)}\n            />\n            <Button className=\"small\" onClick={goToSearch}>\n                 <i className=\"bx bx-search\"></i>\n            </Button>\n        </div>\n    )\n}\n\nexport default MovieGrid;\n"]},"metadata":{},"sourceType":"module"}